{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","className","id","href","src","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","target","icon","faLinkedinIn","faGithub","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAMaA,EAAM,WACjB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,2DAA2DC,GAAG,WAC3E,uBAAGD,UAAU,iCAAiCE,KAAK,KACjD,0BAAMF,UAAU,qBAAhB,mBACA,0BAAMA,UAAU,qBAAoB,yBAAKA,UAAU,oDAAoDG,IAAI,cAAcC,IAAI,OAE/H,4BAAQJ,UAAU,iBAAiBK,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAAoB,0BAAMV,UAAU,yBAC1N,yBAAKA,UAAU,2BAA2BC,GAAG,0BAC3C,wBAAID,UAAU,cACZ,wBAAIA,UAAU,YAAW,uBAAGA,UAAU,6BAA6BE,KAAK,UAA/C,aAU/B,yBAAKF,UAAU,uBAEb,6BAASA,UAAU,iBAAiBC,GAAG,SACrC,yBAAKD,UAAU,0BACb,wBAAIA,UAAU,QAAd,QAA0B,0BAAMA,UAAU,gBAAhB,UAC1B,yBAAKA,UAAU,mBAAf,uCAEE,uBAAGE,KAAK,kCAAR,4BAEF,uBAAGF,UAAU,aAAb,6eAKA,yBAAKA,UAAU,gBACb,uBAAGA,UAAU,cAAcE,KAAK,0CAA0CS,OAAO,UAAS,kBAAC,IAAD,CAAiBC,KAAMC,OACjH,uBAAGb,UAAU,cAAcE,KAAK,gCAAgCS,OAAO,UAAS,kBAAC,IAAD,CAAiBC,KAAME,aC/BjGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b8a78951.chunk.js","sourcesContent":["/* eslint-disable react/jsx-no-target-blank */\nimport React from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub, faLinkedinIn } from '@fortawesome/free-brands-svg-icons';\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\" id=\"sideNav\">\n        <a className=\"navbar-brand js-scroll-trigger\" href=\"/\">\n          <span className=\"d-block d-lg-none\">Clarence Taylor</span>\n          <span className=\"d-none d-lg-block\"><img className=\"img-fluid img-profile rounded-circle mx-auto mb-2\" src=\"/avatar.png\" alt=\"\" /></span>\n        </a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span className=\"navbar-toggler-icon\"></span></button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\"><a className=\"nav-link js-scroll-trigger\" href=\"#about\">About</a></li>\n            {/* <li className=\"nav-item\"><a className=\"nav-link js-scroll-trigger\" href=\"#experience\">Experience</a></li>\n            <li className=\"nav-item\"><a className=\"nav-link js-scroll-trigger\" href=\"#education\">Education</a></li>\n            <li className=\"nav-item\"><a className=\"nav-link js-scroll-trigger\" href=\"#skills\">Skills</a></li>\n            <li className=\"nav-item\"><a className=\"nav-link js-scroll-trigger\" href=\"#interests\">Interests</a></li>\n            <li className=\"nav-item\"><a className=\"nav-link js-scroll-trigger\" href=\"#awards\">Awards</a></li> */}\n          </ul>\n        </div>\n      </nav>\n      {/* <!-- Page Content--> */}\n      <div className=\"container-fluid p-0\">\n        {/* <!-- About--> */}\n        <section className=\"resume-section\" id=\"about\">\n          <div className=\"resume-section-content\">\n            <h1 className=\"mb-0\">Arpit<span className=\"text-primary\">Nigam</span></h1>\n            <div className=\"subheading mb-5\">\n              Seattle, WA · (213) 263-1805 ·\n              <a href=\"mailto:arpit.nigam@outlook.com\">arpit.nigam@outlook.com</a>\n            </div>\n            <p className=\"lead mb-5\">I am currently working as Software Development Engineer 2 for Amazon FinTech. \n            I love to extract fun out of everything and kind of workaholic. \n            I like myself loaded with responsibilities- that is what makes my applications work faster and smoother (though it is interpreted differently by different people). \n            An Engineer by choice and not by force. \n            I love playing with Computers (and computer games also), meet challenges so often but I'm all satisfied with what I do and that keeps me happy.</p>\n            <div className=\"social-icons\">\n              <a className=\"social-icon\" href=\"https://www.linkedin.com/in/nigamarpit/\" target=\"_blank\"><FontAwesomeIcon icon={faLinkedinIn} /></a>\n              <a className=\"social-icon\" href=\"https://github.com/nigamarpit\" target=\"_blank\"><FontAwesomeIcon icon={faGithub} /></a>\n              {/* <a className=\"social-icon\" href=\"#\"><i className=\"fab fa-twitter\"></i></a>\n              <a className=\"social-icon\" href=\"#\"><i className=\"fab fa-facebook-f\"></i></a> */}\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}